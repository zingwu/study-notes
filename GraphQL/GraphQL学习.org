#+TITLE: GraphQL学习

* GraphQL 学习
** 查询和变更
*** 字段（Fields）
    简单来说，GraphQL 是关于请求对象上的特定字段。在 GraphQL 中查询你会发现，查询和其结果拥有几乎完全一样的结构。例如：
    #+begin_src js
      // 查询
      {
          hero{
              name
          }
      }

      // 结果
      {
          "data":{
              "hero":{
                  "name":"zingwu"
              }
          }
      }
    #+end_src

*** 参数（arguments）
    字段还可以传递参数。在 GraphQL 中，每一个字段和嵌套对象,设置说是一个标量字段，都能有自己的一套参数，用于实现服务端的一次转换，而不需要请求多个 API。
    #+begin_src js
      // 查询
      {
          human(id:"1000"){
              name
              height(unit:FOOT)
          }
      }

      // 结果
      {
          "data":{
              "human":{
                  "name":"howell",
                  "height": 1.79
              }
          }
      }
    #+end_src

    参数可以是不同类型。在上面例子中间，我们对 height 使用了一个枚举类型。

*** 别名（Aliases）
    可以重命名结果中的字段为任意你想到的名字。
    #+begin_src js
      // 查询
      {
          empireHero:hero(episode:EMPIRE){
              name
          }
          jediHero:hero(episode:JEDI){
              name
          }
      }

      // 结果
      {
          "data":{
              "empireHero":{
                  "name":"Luke"
              },
              "jediHero":{
                  "name":"R2"
              }
          }
      }
    #+End_src

    在这个例子中，本来两个 hero 字段应该会存在冲突，我们利用别名巧妙的避免了冲突。

*** 片段（Fragments）
    片段是指可以组织一组字段，然后在需要他们的地方引入，避免重复的书写相同字段。
    #+begin_src js
      // 查询
      {
          leftComparison: hero(episode: EMPIRE) {
              ...comparisonFields
          }
          rightComparison: hero(episode: JEDI) {
              ...comparisonFields
          }
      }

      fragment comparisonFields on Character {
          name
          appearsIn
          friends {
              name
          }
      }

      // 结果
      {
          "data": {
              "leftComparison": {
                  "name": "Luke Skywalker",
                  "appearsIn": [
                      "NEWHOPE",
                      "EMPIRE",
                      "JEDI"
                  ],
                  "friends": [
                      {
                          "name": "Han Solo"
                      },
                      {
                          "name": "Leia Organa"
                      },
                      {
                          "name": "C-3PO"
                      },
                      {
                          "name": "R2-D2"
                      }
                  ]
              },
              "rightComparison": {
                  "name": "R2-D2",
                  "appearsIn": [
                      "NEWHOPE",
                      "EMPIRE",
                      "JEDI"
                  ],
                  "friends": [
                      {
                          "name": "Luke Skywalker"
                      },
                      {
                          "name": "Han Solo"
                      },
                      {
                          "name": "Leia Organa"
                      }
                  ]
              }
          }
      }
    #+end_src

    片段的概念常用于将复杂的应用数据需求分割成小块，特别是要将大量不同片段的 UI 组件组合成一个初始数据获取的时候。

*** 操作名称（Operation name）
    操作类型可以是 query,mutation 或 subscription,描述你打算做什么类型的操作，操作类型是必需的。
    操作名称是你的操作的有意义和明确的名称，他仅在有多个操作的文档中是必需的。
    #+begin_src js
      // 查询
      query HeroNameAndFriends {
          hero {
              name
              friends {
                  name
              }
          }
      }

      // 结果
      {
          "data": {
              "hero": {
                  "name": "R2-D2",
                  "friends": [
                      {
                          "name": "Luke Skywalker"
                      },
                      {
                          "name": "Han Solo"
                      },
                      {
                          "name": "Leia Organa"
                      }
                  ]
              }
          }
      }

    #+end_src

*** 变量（Variables）
    
    
