#+TITLE:      tsconfig.json配置

* 目录                                                    :TOC_4_gh:
- [[#why][why]]
- [[#编译选项配置][编译选项配置]]
  - [[#compileroptions配置编译选项][compilerOptions:配置编译选项]]
- [[#文件选项配置][文件选项配置]]
  - [[#files-表示编译需要编译的单个文件列表][files: 表示编译需要编译的单个文件列表]]
  - [[#include-表示编译需要编译的文件或目录][include: 表示编译需要编译的文件或目录]]
  - [[#exclude-表示编译器需要排除的文件或文件夹][exclude: 表示编译器需要排除的文件或文件夹]]
  - [[#extends-引入其他配置文件继承配置][extends: 引入其他配置文件，继承配置]]

* why
在TS的项目中，TS最终都会被编译JS文件执行，TS编译器在编译TS文件的时候都会先在项目根目录的tsconfig.json文件，根据该文件的配置进行编译，默认情况下，如果该文件没有任何配置，TS编译器会默认编译项目目录下所有的.ts、.tsx、.d.ts文件。实际项目中，会根据自己的需求进行自定义的配置，下面就来详细了解下tsconfig.json的文件配置
* 编译选项配置
** compilerOptions:配置编译选项
#+begin_src js
  {
      "compilerOptions": {

          /* 基本选项 */
          "target": "es5",                       // 指定 ECMAScript 目标版本: 'ES3' (default), 'ES5', 'ES6'/'ES2015', 'ES2016', 'ES2017', or 'ESNEXT'
          "module": "commonjs",                  // 指定使用模块: 'commonjs', 'amd', 'system', 'umd' or 'es2015'
          "lib": [],                             // 指定要包含在编译中的库文件
          "allowJs": true,                       // 允许编译 javascript 文件
          "checkJs": true,                       // 报告 javascript 文件中的错误
          "jsx": "preserve",                     // 指定 jsx 代码的生成: 'preserve', 'react-native', or 'react'
          "declaration": true,                   // 生成相应的 '.d.ts' 文件
          "sourceMap": true,                     // 生成相应的 '.map' 文件
          "outFile": "./",                       // 将输出文件合并为一个文件,除非 module 是 None，System 或 AMD， 否则不能使用 outFile。 这个选项不能用来打包 CommonJS 或 ES6 模块。
          "outDir": "./",                        // 指定输出目录
          "rootDir": "./",                       // 用来控制输出目录结构 --outDir.
          "removeComments": true,                // 删除编译后的所有的注释
          "noEmit": true,                        // 不生成输出文件
          "importHelpers": true,                 // 从 tslib 导入辅助工具函数
          "isolatedModules": true,               // 将每个文件作为单独的模块 （与 'ts.transpileModule' 类似）.

          /* 严格的类型检查选项 */
          "strict": true,                        // 启用所有严格类型检查选项
          "noImplicitAny": true,                 // 在表达式和声明上有隐含的 any类型时报错
          "strictNullChecks": true,              // 启用严格的 null 检查
          "noImplicitThis": true,                // 当 this 表达式值为 any 类型的时候，生成一个错误
          "alwaysStrict": true,                  // 以严格模式检查每个模块，并在每个文件里加入 'use strict'

          /* 额外的检查 */
          "noUnusedLocals": true,                // 有未使用的变量时，抛出错误
          "noUnusedParameters": true,            // 有未使用的参数时，抛出错误
          "noImplicitReturns": true,             // 并不是所有函数里的代码都有返回值时，抛出错误
          "noFallthroughCasesInSwitch": true,    // 报告 switch 语句的 fallthrough 错误。（即，不允许 switch 的 case 语句贯穿）

          /* 模块解析选项 */
          "moduleResolution": "node",            // 选择模块解析策略： 'node' (Node.js) or 'classic' (TypeScript pre-1.6)
          "baseUrl": "./",                       // 用于解析非相对模块名称的基目录
          "paths": {},                           // 模块名到基于 baseUrl 的路径映射的列表
          "rootDirs": [],                        // 根文件夹列表，其组合内容表示项目运行时的结构内容
          "typeRoots": [],                       // 包含类型声明的文件列表
          "types": [],                           // 需要包含的类型声明文件名列表
          "allowSyntheticDefaultImports": true,  // 允许从没有设置默认导出的模块中默认导入。

          /* Source Map Options */
          "sourceRoot": "./",                    // 指定调试器应该找到 TypeScript 文件而不是源文件的位置
          "mapRoot": "./",                       // 指定调试器应该找到映射文件而不是生成文件的位置
          "inlineSourceMap": true,               // 生成单个 soucemaps 文件，而不是将 sourcemaps 生成不同的文件
          "inlineSources": true,                 // 将代码与 sourcemaps 生成到一个文件中，要求同时设置了 --inlineSourceMap 或 --sourceMap 属性

          /* 其他选项 */
          "experimentalDecorators": true,        // 启用装饰器
          "emitDecoratorMetadata": true          // 为装饰器提供元数据的支持
      }
  }
#+end_src
* 文件选项配置
** files: 表示编译需要编译的单个文件列表
#+begin_src js
"files": [
  // 指定编译文件是src目录下的a.ts文件
  "scr/a.ts"
]
#+end_src
** include: 表示编译需要编译的文件或目录
#+begin_src js
"include": [
  // "scr" // 会编译src目录下的所有文件，包括子目录
  // "scr/*" // 只会编译scr一级目录下的文件
  "scr/*/*" // 只会编译scr二级目录下的文件
]
#+end_src
** exclude: 表示编译器需要排除的文件或文件夹
默认排除node_modules 文件夹下的文件
#+begin_src js
"exclude": [
  // 排除src目录下的lib文件夹下的文件不会编译
  "src/lib"
]
#+end_src
** extends: 引入其他配置文件，继承配置
#+begin_src js
// 把基础配置抽离成tsconfig.base.json文件，然后引入
"extends": "./tsconfig.base.json"
#+end_src
