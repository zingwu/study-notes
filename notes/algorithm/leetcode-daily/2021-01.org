#+TITLE:      2021-01

* 目录                                                    :TOC_4_gh:noexport:
- [[#1-8旋转数组][1-8：旋转数组]]
  - [[#题目难度][题目难度]]
  - [[#题目描述][题目描述]]
  - [[#示例][示例]]
    - [[#示例1][示例1]]
    - [[#示例2][示例2]]
  - [[#解法][解法]]
    - [[#解法一利用循环arr库函数][解法一：利用循环+arr库函数]]
      - [[#思路][思路]]
      - [[#代码][代码]]
      - [[#复杂度分析][复杂度分析]]
- [[#1-17-缀点成线][1-17: 缀点成线]]
  - [[#题目难度-1][题目难度]]
  - [[#题目描述-1][题目描述]]
  - [[#示例-1][示例]]
  - [[#解法-1][解法]]
    - [[#思路-1][思路]]
    - [[#代码-1][代码]]
    - [[#复杂度分析-1][复杂度分析]]

* 1-8：旋转数组
** 题目难度
中等
** 题目描述
给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。
** 示例
*** 示例1
#+begin_quote
输入：[1,2,3,4,5,6,7] 和 k = 3
输出：[5,6,7,1,2,3,4]
解释：
向右旋转 1 步: [7,1,2,3,4,5,6]
向右旋转 2 步: [6,7,1,2,3,4,5]
向右旋转 3 步: [5,6,7,1,2,3,4]
#+end_quote
*** 示例2
#+begin_quote
输入：[-1,-100,3,99] 和 k = 2
输出：[3,99,-1,-100]
解释：
向右旋转 1 步: [99,-1,-100,3]
向右旋转 2 步: [3,99,-1,-100]
#+end_quote
** 解法
*** 解法一：利用循环+arr库函数
**** 思路
对数组执行k次循环，每次循环去除数组最后一个元素，并且把它添加到数组首位
**** 代码
#+begin_src js
  const rotate = (nums, k) => {
      while(k--){
          nums.unshift(nums.pop())
      }
  };
#+end_src
**** 复杂度分析
 时间复杂度为O(nk)，空间复杂度为O(1)

* 1-17: 缀点成线
** 题目难度
简单
** 题目描述
在一个XY 坐标系中有一些点，我们用数组coordinates来分别记录它们的坐标，其中coordinates[i] = [x, y]表示横坐标为 x、纵坐标为 y的点。

请你来判断，这些点是否在该坐标系中属于同一条直线上，是则返回 true，否则请返回 false。
** 示例
#+begin_quote
输入：coordinates = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]
输出：true
#+end_quote
** 解法
*** 思路
+ 首先判断数组大小，如果等于2，则两点可以确定一条直线，直接返回true
+ 然后通过直线的两点式方程，已知两点可以确定一条直线，这里我们选择数组中第一个点和最后一个点作为基础点
+ 然后通过遍历数组代入方程，比较每一次两点式方程代入值是否相等，公式为： (x-x1)(y1-y2)=(y-y1)(y1-y2)
*** 代码
#+begin_src js
  const checkStraightLine = (coordinates) => {
      if (coordinates.length === 2) {
          return true;
      }
      for (let i = 0; i < coordinates.length - 1; i++) {
          const x =
                (coordinates[i][0] - coordinates[0][0]) *
                (coordinates[i + 1][1] - coordinates[0][1]);
          const y =
                (coordinates[i][1] - coordinates[0][1]) *
                (coordinates[i + 1][0] - coordinates[0][0]);
          if (x !== y) {
              return false;
          }
      }
      return true;
  };
#+end_src
*** 复杂度分析
时间复杂度为O(n)，空间复杂度为O(1)
