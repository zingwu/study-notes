j==#+TITLE:      2021-01

* 目录                                                    :TOC_4_gh:noexport:
- [[#1-8旋转数组][1-8：旋转数组]]
  - [[#题目难度][题目难度]]
  - [[#题目描述][题目描述]]
  - [[#示例][示例]]
    - [[#示例1][示例1]]
    - [[#示例2][示例2]]
  - [[#解法][解法]]
    - [[#解法一利用循环arr库函数][解法一：利用循环+arr库函数]]
      - [[#思路][思路]]
      - [[#代码][代码]]
      - [[#复杂度分析][复杂度分析]]

* 1-8：旋转数组
** 题目难度
中等
** 题目描述
给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。
** 示例
*** 示例1
#+begin_quote
输入：[1,2,3,4,5,6,7] 和 k = 3
输出：[5,6,7,1,2,3,4]
解释：
向右旋转 1 步: [7,1,2,3,4,5,6]
向右旋转 2 步: [6,7,1,2,3,4,5]
向右旋转 3 步: [5,6,7,1,2,3,4]
#+end_quote
*** 示例2
#+begin_quote
输入：[-1,-100,3,99] 和 k = 2
输出：[3,99,-1,-100]
解释：
向右旋转 1 步: [99,-1,-100,3]
向右旋转 2 步: [3,99,-1,-100]
#+end_quote
** 解法
*** 解法一：利用循环+arr库函数
**** 思路
对数组执行k次循环，每次循环去除数组最后一个元素，并且把它添加到数组首位
**** 代码
#+begin_src js
  const rotate = (nums, k) => {
      while(k--){
          nums.unshift(nums.pop())
      }
  };
#+end_src
**** 复杂度分析
时间复杂度为O(n)，空间复杂度为O(n)
