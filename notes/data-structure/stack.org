#+TITLE:      栈

* 目录                                                    :TOC_4_gh:noexport:
- [[#栈数据结构][栈数据结构]]
  - [[#栈的实例][栈的实例]]
- [[#创建一个基于数组的栈][创建一个基于数组的栈]]
  - [[#实现][实现]]
- [[#创建一个基于对象的栈][创建一个基于对象的栈]]

* 栈数据结构
栈是一种遵从后进先出原则的有序集合，新添加或待删除的元素都保存在栈顶。在栈里，新元素都保存在栈顶，旧元素都接近栈底。
** 栈的实例
+ 现实生活中：一摞书或者叠放的盘子。
+ 栈也被用在编程语言的编译器和内存中保存变量，方法调用等等，也被用于浏览器的历史记录。
* 创建一个基于数组的栈
需要为栈定义以下方法：
+ push(elements): 添加一个或多个新元素到栈顶。
+ pop(): 移除栈顶的元素，同时返回这个元素。
+ peek(): 查看栈顶的元素，并且返回这个元素。
+ isEmpty(): 如果栈里没有任何元素返回true，否则返回false。
+ clear(): 移除栈里的所有元素。
+ size(): 返回栈里的元素个数。
** 实现
#+begin_src js
class Stack {
  constructor() {
    this.items = [];
  }
  // add elements into stack,allow one or more arguments.
  push(...elements){
    this.items.push(...elements);
  }
  pop(){
    return this.items.pop();
  }
  peek(){
    return this.items[this.item.length - 1];
  }
  isEmpty(){
    return this.items.length === 0;
  }
  size(){
    return this.items.length;
  }
  clear(){
    this.item = [];
  }
}
#+end_src
* 创建一个基于对象的栈
#+begin_src js
class Stack {
  constructor() {
    this.count = 0;
    this.items = {};
  }
  push(element) {
    this.items[this.count] = element;
    this.count++;
  }
  pop() {
    if(this.isEmpty()){
      return undefined;
    }
    this.count--;
    const result = this.items[this.count];
    delete this.items[this.count];
    return result;
  }
  peek() {
    const result = this.items[this.count - 1];
    console.log(result);
  }
  isEmpty() {
    return this.count === 0;
  }
  size(){
    return this,count;
  }
  clear(){
    this.count = 0;
    this.item = {};
  }
}
#+end_src
