#+TITLE:      学习数据结构的思路

* 目录                                                    :TOC_4_gh:noexport:
- [[#数据结构的存储方式][数据结构的存储方式]]
- [[#数据结构的基本操作][数据结构的基本操作]]

* 数据结构的存储方式
数据结构的存储方式只有两种：数组（顺序存储）和链表（链式存储）。二者的优缺点如下：
+ 数组由于是紧凑连续存储,可以随机访问，通过索引快速找到对应元素，而且相对节约存储空间。但正因为连续存储，内存空间必须一次性分配够，所以说数组如果要扩容，需要重新分配一块更大的空间，再把数据全部复制过去，时间复杂度 O(N)；而且你如果想在数组中间进行插入和删除，每次必须搬移后面的所有数据以保持连续，时间复杂度 O(N)。
+ 链表因为元素不连续，而是靠指针指向下一个元素的位置，所以不存在数组的扩容问题；如果知道某一元素的前驱和后驱，操作指针即可删除该元素或者插入新元素，时间复杂度 O(1)。但是正因为存储空间不连续，你无法根据一个索引算出对应元素的地址，所以不能随机访问；而且由于每个元素必须存储指向前后元素位置的指针，会消耗相对更多的储存空间。
* 数据结构的基本操作
对于任何数据结构，其操作无非就是增删改查。
数据结构种类很多，但它们存在的目的都是在不同的应用场景，尽可能高效地增删查改。话说这不就是数据结构的使命么？  
如何遍历 + 访问？我们仍然从最高层来看，各种数据结构的遍历 + 访问无非两种形式：线性的和非线性的。  
线性就是 for/while 迭代为代表，非线性就是递归为代表。再具体一步，无非以下几种框架:
+ 数组遍历框架，典型的线性迭代结构：
  #+begin_src js

  #+end_src
